import { collection, addDoc } from "firebase/firestore";

#Using addDoc:-

async function addCourse() {
  try {
    // Step 1: Add Course Document
    const courseRef = await addDoc(collection(db, "courses"), {
      courseTitle: "Introduction to Quantum Computing",
      courseDescription: "Learn the basics of quantum mechanics and how quantum computing works.",
      courseThumbnail: "https://example.com/thumbnail.jpg",
      coursePrice: 199,
      isPublished: true,
      discount: 20,
      educator: "user_XYZ123",
      enrolledStudents: ["user_XYZ123", "user_ABC456"],
      courseRatings: [
        { userId: "user_XYZ123", rating: 5 },
        { userId: "user_ABC456", rating: 4 }
      ],
      createdAt: Date.now(),
      updatedAt: Date.now()
    });

    console.log(`Course added with ID: ${courseRef.id}`);

    // Step 2: Add Chapters (using courseRef.id, as this was auto-generated)
    const chapters = [
      { chapterTitle: "Quantum Basics", chapterOrder: 1 },
      { chapterTitle: "Quantum Gates", chapterOrder: 2 }
    ];

    for (const chapter of chapters) {
      const chapterRef = await addDoc(collection(db, `courses/${courseRef.id}/courseContent`), {
        chapterTitle: chapter.chapterTitle,
        chapterOrder: chapter.chapterOrder
      });

      console.log(`Chapter added: ${chapterRef.id}`);
    }

    // Further steps for lectures...
  } catch (error) {
    console.error("Error adding course:", error);
  }
}

#Using setDoc:-
import { collection, doc, setDoc } from "firebase/firestore";

async function addCourse() {
  try {
    // Step 1: Add Course Document (with manual reference)
    const courseRef = doc(collection(db, "courses"));
    await setDoc(courseRef, {
      courseTitle: "Introduction to Quantum Computing",
      courseDescription: "Learn the basics of quantum mechanics and how quantum computing works.",
      courseThumbnail: "https://example.com/thumbnail.jpg",
      coursePrice: 199,
      isPublished: true,
      discount: 20,
      educator: "user_XYZ123",
      enrolledStudents: ["user_XYZ123", "user_ABC456"],
      courseRatings: [
        { userId: "user_XYZ123", rating: 5 },
        { userId: "user_ABC456", rating: 4 }
      ],
      createdAt: Date.now(),
      updatedAt: Date.now()
    });

    console.log(`Course added with ID: ${courseRef.id}`);

    // Step 2: Add Chapters (using courseRef.id)
    const chapters = [
      { chapterTitle: "Quantum Basics", chapterOrder: 1 },
      { chapterTitle: "Quantum Gates", chapterOrder: 2 }
    ];

    for (const chapter of chapters) {
      const chapterRef = doc(collection(db, `courses/${courseRef.id}/courseContent`));
      await setDoc(chapterRef, {
        chapterTitle: chapter.chapterTitle,
        chapterOrder: chapter.chapterOrder
      });

      console.log(`Chapter added: ${chapterRef.id}`);
    }

    // Further steps for lectures...
  } catch (error) {
    console.error("Error adding course:", error);
  }
}

Adding Chapters:-

import { collection, doc, setDoc, updateDoc, deleteDoc, getDoc } from "firebase/firestore";
import { db } from './firebase';  // Import your Firebase Firestore instance

const handleChapter = async (action, chapterId, courseId) => {
  const courseRef = doc(db, "courses", courseId);  // Reference to the course document
  const chaptersRef = collection(courseRef, "chapters");  // Subcollection of chapters

  // Get the current course document to manage chapters
  const courseDoc = await getDoc(courseRef);
  const chapters = courseDoc.data()?.chapters || [];  // Get the existing chapters (if any)

  if (action === 'add') {
    const title = prompt('Enter Chapter Name:');
    if (title) {
      // New chapter data
      const newChapter = {
        chapterTitle: title,
        chapterContent: [],
        collapse: false,
        chapterOrder: chapters.length > 0 ? chapters[chapters.length - 1].chapterOrder + 1 : 1, // Set order incrementally
      };

      // Create a new chapter document in the "chapters" subcollection with auto-generated ID
      const newChapterRef = doc(chaptersRef);  // Auto-generated ID for the chapter
      await setDoc(newChapterRef, newChapter);  // Save the new chapter

      console.log(`Chapter '${title}' added successfully.`);
    }
  }
  
  else if (action === 'remove') {
    // Find the chapter to remove
    const chapterToRemoveRef = doc(chaptersRef, chapterId);  // Get the chapter document reference by ID
    await deleteDoc(chapterToRemoveRef);  // Delete the chapter document

    // Reorder the remaining chapters (update their order)
    const updatedChapters = chapters.filter((chapter) => chapter.chapterId !== chapterId);
    const newChapters = updatedChapters.map((chapter, index) => ({
      ...chapter,
      chapterOrder: index + 1  // Reassign chapter order after deletion
    }));

    // Update the course document with the new chapter order (if needed)
    // You might need to update the order of chapters in the Firestore document
    console.log(`Chapter removed and reordered successfully.`);
  }

  else if (action === 'toggle') {
    // Find the chapter to toggle its collapse state
    const updatedChapters = chapters.map((chapter) =>
      chapter.chapterId === chapterId
        ? { ...chapter, collapse: !chapter.collapse }  // Toggle collapse state
        : chapter
    );

    // Update the collapse state of the chapter in the Firestore document
    const updatedChapterRef = doc(chaptersRef, chapterId);
    await updateDoc(updatedChapterRef, {
      collapse: updatedChapters.find(ch => ch.chapterId === chapterId).collapse
    });

    console.log(`Chapter '${chapterId}' collapse state toggled.`);
  }
};
